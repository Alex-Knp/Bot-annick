
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================
include "spi_slave.sv"
include "i2c_module.sv"
include "adc_module.sv"
include "uart_module.sv"

module DE0_minibot(

	//////////// CLOCK //////////
	CLOCK_50,

	//////////// LED //////////
	LED,

	//////////// KEY //////////
	KEY,

	//////////// SDRAM //////////
	DRAM_ADDR,
	DRAM_BA,
	DRAM_CAS_N,
	DRAM_CKE,
	DRAM_CLK,
	DRAM_CS_N,
	DRAM_DQ,
	DRAM_DQM,
	DRAM_RAS_N,
	DRAM_WE_N,

	//////////// EPCS //////////
	EPCS_ASDO,
	EPCS_DATA0,
	EPCS_DCLK,
	EPCS_NCSO,

	//////////// EEPROM //////////
	I2C_SCLK,
	I2C_SDAT,

	//////////// ADC //////////
	ADC_CS_N,
	ADC_SADDR,
	ADC_SCLK,
	ADC_SDAT,

	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	GPIO_0,
	GPIO_0_IN,

	//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
	GPIO_1,
	GPIO_1_IN 
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_50;

//////////// LED //////////
output		     [7:0]		LED;

//////////// KEY //////////
input 		     [1:0]		KEY;

//////////// SDRAM //////////
output		    [12:0]		DRAM_ADDR;
output		     [1:0]		DRAM_BA;
output		          		DRAM_CAS_N;
output		          		DRAM_CKE;
output		          		DRAM_CLK;
output		          		DRAM_CS_N;
inout 		    [15:0]		DRAM_DQ;
output		     [1:0]		DRAM_DQM;
output		          		DRAM_RAS_N;
output		          		DRAM_WE_N;

//////////// EPCS //////////
output		          		EPCS_ASDO;
input 		          		EPCS_DATA0;
output		          		EPCS_DCLK;
output		          		EPCS_NCSO;

//////////// EEPROM //////////
output		          		I2C_SCLK;
inout 		          		I2C_SDAT;

//////////// ADC //////////
output		          		ADC_CS_N;
output		          		ADC_SADDR;
output		          		ADC_SCLK;
input 		          		ADC_SDAT;

//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
inout 		    [33:0]		GPIO_0;
input 		     [1:0]		GPIO_0_IN;

//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
inout 		    [33:0]		GPIO_1;
input 		     [1:0]		GPIO_1_IN;


//=======================================================
//  SPI module instantiation

	logic spi_clk, spi_cs, spi_mosi, spi_miso;
	logic [31:0] DataToPI, DataFromPI;
	logic reset;


spi_slave spi_slave_inst (
	.sck(spi_clk),    
	.mosi(spi_mosi),   
	.miso(spi_miso), 
	.reset(), 
	.d(DataToPI), 
	.q(DataFromPI)
);

	assign spi_clk  		= GPIO_0[22];	
	assign spi_cs   		= GPIO_0[20];	
	assign spi_mosi     	= GPIO_0[23];	
	
	assign GPIO_0[21] = spi_cs ? 1'bz : spi_miso; 

// encoder module instantiation ////////////////////////////////////////////////////////

logic enc1A, enc1B, direction_enc1;
logic [31:0] speed_enc1;

encoder encoder1 (
	.clk_nano(CLOCK_50),
	.A(enc1A),
	.B(enc1B),
	.speed(speed_enc1),
	.dir(direction_enc1),
	.reset(reset)
);

logic enc2A, enc2B, direction_enc2;
logic [31:0] speed_enc2;
encoder encoder2 (
	.clk_nano(CLOCK_50),
	.A(enc2A),
	.B(enc2B),
	.speed(speed_enc2),
	.dir(direction_enc2),
	.reset(reset)
);

// link with pins encoder
assign enc1A     = GPIO_0[1];
assign enc1B     = GPIO_0[3]; 

assign enc2A     = GPIO_0[2];
assign enc2B     = GPIO_0[5];

// odometer module instantiation ////////////////////////////////////////////////////////
logic reset_odo;

logic odo1A, odo1B;
logic [31:0] dist_odo1;
odometer odo1 (
	.reset(reset_odo),
	.A(odo1A),
	.B(odo1B),
	.dist(dist_odo1)
);

logic odo2A, odo2B;
logic [31:0] dist_odo2;
odometer odo2 (
	.reset(reset_odo),
	.A(odo2A),
	.B(odo2B),
	.dist(dist_odo2)
);

// link with pins encoder
assign odo1A     = GPIO_0[8];
assign odo1B     = GPIO_0[9]; 

assign odo2A     = GPIO_0[10];
assign odo2B     = GPIO_0[11];


endmodule

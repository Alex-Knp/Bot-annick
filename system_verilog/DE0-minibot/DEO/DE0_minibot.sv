
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================


module DE0_minibot(

	//////////// CLOCK //////////
	CLOCK_50,

	//////////// LED //////////
	LED,

	//////////// KEY //////////
	KEY,

	//////////// SDRAM //////////
	DRAM_ADDR,
	DRAM_BA,
	DRAM_CAS_N,
	DRAM_CKE,
	DRAM_CLK,
	DRAM_CS_N,
	DRAM_DQ,
	DRAM_DQM,
	DRAM_RAS_N,
	DRAM_WE_N,

	//////////// EPCS //////////
	EPCS_ASDO,
	EPCS_DATA0,
	EPCS_DCLK,
	EPCS_NCSO,

	//////////// EEPROM //////////
	I2C_SCLK,
	I2C_SDAT,

	//////////// ADC //////////
	ADC_CS_N,
	ADC_SADDR,
	ADC_SCLK,
	ADC_SDAT,

	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	GPIO_0,
	GPIO_0_IN,

	//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
	GPIO_1,
	GPIO_1_IN 
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_50;

//////////// LED //////////
output		     [7:0]		LED;

//////////// KEY //////////
input 		     [1:0]		KEY;

//////////// SDRAM //////////
output		    [12:0]		DRAM_ADDR;
output		     [1:0]		DRAM_BA;
output		          		DRAM_CAS_N;
output		          		DRAM_CKE;
output		          		DRAM_CLK;
output		          		DRAM_CS_N;
inout 		    [15:0]		DRAM_DQ;
output		     [1:0]		DRAM_DQM;
output		          		DRAM_RAS_N;
output		          		DRAM_WE_N;

//////////// EPCS //////////
output		          		EPCS_ASDO;
input 		          		EPCS_DATA0;
output		          		EPCS_DCLK;
output		          		EPCS_NCSO;

//////////// EEPROM //////////
output		          		I2C_SCLK;
inout 		          		I2C_SDAT;

//////////// ADC //////////
output		          		ADC_CS_N;
output		          		ADC_SADDR;
output		          		ADC_SCLK;
input 		          		ADC_SDAT;

//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
inout 		    [33:0]		GPIO_0;
input 		     [1:0]		GPIO_0_IN;

//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
inout 		    [33:0]		GPIO_1;
input 		     [1:0]		GPIO_1_IN;


//=======================================================

	logic reset; 	//GENERAL RESET

// ---  SPI module instantiation --------------------------

	logic spi_clk, spi_cs, spi_mosi, spi_miso;
	logic [31:0] DataFromPI;
	logic [31:0] DataToPI;
	logic [7:0]  AddrFromPi;

	spi_slave spi_slave_inst (
	.SPI_CLK(spi_clk),
	.SPI_CS(spi_cs),
	.SPI_MOSI(spi_mosi),
	.SPI_MISO(spi_miso),
	.Data_Addr(AddrFromPi),
	.Data_Write(DataToPI),
	.Data_Read(DataFromPI),
	.Clk(CLOCK_50)
);

	assign spi_clk  		= GPIO_0[11];	// SCLK = GPIO_0[22]
	assign spi_cs   		= GPIO_0[9];	// CE1  = GPIO_0[20]
	assign spi_mosi     	= GPIO_0[15];	// MOSI = GPIO_0[23]

	assign GPIO_0[13] = spi_cs ? 1'bz : spi_miso ; 


// ---  Data stored SENSOR  ------------------------------- 

	logic [31:0] Encodeur_Left, Encodeur_Right, Odometre_Left, Odometre_Right;

	always_comb begin
		case(AddrFromPi)
			8'h0f : DataToPI = 32'h0f0f0f0f;		//TEST
			8'hf0 : DataToPI = 32'hffff0000;		//TEST

			8'h10 : DataToPI = Encodeur_Right; 		// Encodeur gauche 	: 0x10
			8'h11 : DataToPI = Encodeur_Left;		// Encodeur droit 	: 0x11
			8'h20 : DataToPI = Odometre_Right;  	// Odomètre gauche 	: 0x20
			8'h21 : DataToPI = Odometre_Left; 		// Odomètre droit 	: 0x21
			default : DataToPI = 32'bx; 		
		endcase
	end


// ---  Encodeur module instantiation --------------------------

//encodeur_gauche
logic enc1A, enc1B;

encoder encoder1 (
	.clk(CLOCK_50),
	.A(enc1A),
	.B(enc1B),
	.out(Encodeur_Left),
	.reset(reset)
	);


//encodeur_droit
logic enc2A, enc2B;

encoder encoder2 (
	.clk(CLOCK_50),
	.A(enc2A),
	.B(enc2B),
	.out(Encodeur_Right),
	.reset(reset)
);

// link with pins encoder
assign enc1A     = GPIO_0[2]; 	//Encodeur left A  : GPIO_0[]
assign enc1B     = GPIO_0[5]; 	//Encodeur left A  : GPIO_0[]
assign enc2A     = GPIO_0[1];		//Encodeur right A : GPIO_0[]
assign enc2B     = GPIO_0[3];		//Encodeur right A : GPIO_0[]



//  --- odometer module instantiation  ----------------------------------------

logic odo1A, odo1B;

odometer odo1 (
	.reset(reset),
	.A(odo1A),
	.B(odo1B),
	.distance(Odometre_Left)
);



logic odo2A, odo2B;

odometer odo2 (
	.reset(reset),
	.A(odo2A),
	.B(odo2B),
	.distance(Odometre_Right)
);

// link with pins encoder

assign odo1A     = GPIO_0[8];	
assign odo1B     = GPIO_0[9]; 
assign odo2A     = GPIO_0[10];
assign odo2B     = GPIO_0[11];

endmodule
